/*
- üëã Made by: zoi_ittack/zoi5161
- üì´ Contact: baomun250@gmail.com
- üå± Start: 00:10 Mar 17 2023
- üê§ Using for Mac OS
- üåô Coding language: C++
- üì° Command language: Vietnamese
It is generated by a special author ‚ú®zoi_ittack/zoi5161‚ú®. Please respect it(Don't copy in any way).
*/

// Ch·∫°y 2 l·ªánh n√†y ƒë·ªÉ th·ª±c thi ch∆∞∆°ng tr√¨nh
/* 
    g++ Game.cpp -o Game -lncurses
    ./Game
*/

#include "Header.h"
#include "Menu.h"
#include "Sign.h"
#include "Tutorial.h"
#include "GameMode.h"
#include "Map.h"
#include "Pause.h"
#include "Warn.h"
#include "Finish.h"
#include "Setup.h"
#include "Input.h"
#include "Draw.h"
#include "Logic.h"

// Menu
bool endMenu = false, played = false, newGame = true, signUp = false;
int dirMenu = 0, chooseMenu = 1, prevMode = 0, chooseWarnNewGame = 1;

char box1[9] = "SIGN UP ";
char box2[9] = "SIGN IN ";
char box3[9] = "TUTORIAL";
char box4[5] = "EXIT";

char box5[9] = "NEW GAME";
char box6[9] = "CONTINUE";

// Sign in // Sign up
bool endSign = true, endUser = false, endPass = true, endSeen = true, endReturnSign = false, warnAcc = false;
int lengthUser = 0;
char user[20], pass[20];

// Tutorial
bool endTutorial = true;

// Game mode
bool endGM = true, modeHard = true;
int dirGM = 0, chooseGM = 2;

char boxGM1[7] = "Normal";
char boxGM2[8] = "Endless";

// Map
bool endMap = true;
int dirMap = 0, chooseMap = 2, Map = 0;

// Pause
bool endPause = true;
int dirPause = 0, choosePause = 1;

// Warn
bool endWarn = true;
int dirWarn = 0, chooseWarn = 1;

// Finish
bool endFinish = true, win = false;

// Game
bool endGame = true, confirm = false;
int height = heightS, width = widthS;
int dir, x, y, randomObj, score = 100, prevX, prevY, last = 0, hz = 0, gameRound = 1, totalTime = 100;
int passingHeight, passingWidth;
int hour, minute, second, millisec;

int obj[27], idxNum[heightB+2][widthB+2], greenBlock[heightB+2][widthB+2], redBlock[heightB+2][widthB+2];
int line[heightB+2][widthB+2], lineOut[heightB+3][widthB+3], lineEnd[heightB+2][widthB+2], lineHelp[heightB+2][widthB+2];
int resetNum[heightB+2][widthB+2], resetLine[heightB+2][widthB+2], resetLineOut[heightB+3][widthB+3], resetLineEnd[heightB+2][widthB+2];

char idxObj[heightB+2][widthB+2];
string backgroundMenu1[41], backgroundMenu2[39], backgroundGame[heightB+2];
string backgroundGM[4], backgroundGMEasy[9], backgroundGMHard[9], backgroundGMReturn[5];
string backgroundMap[4], backgroundMapS[8], backgroundMapM[10], backgroundMapB[12];
string backgroundPause[4], backgroundWarn[10], backgroundNext[5];
string backgroundSignIn[37], backgroundSignUp[37];
string backgroundTutorial[42];
string backgroundWinner[35], backgroundLoser[35];

// Some text boxes
char boxConfirm[37] = "PRESS SPACE TO CONTINUE OR Q TO QUIT";
char boxResume[7] = "RESUME";

// Main
int main()
{
	initscr(); // Kh·ªüi t·∫°o m√¥i tr∆∞·ªùng m√†n h√¨nh: ·∫©n con tr·ªè chu·ªôt, t·∫Øt vi·ªác hi·ªÉn th·ªã c√°c k√Ω t·ª± ƒë√°nh d·∫•u d√≤ng v√† cung c·∫•p c√°c t√≠nh nƒÉng nh∆∞ l∆∞u tr·ªØ v·ªã tr√≠ con tr·ªè c·ªßa m√†n h√¨nh ƒë·ªÉ c√≥ th·ªÉ di chuy·ªÉn con tr·ªè ƒë·∫øn b·∫•t k·ª≥ v·ªã tr√≠ n√†o tr√™n m√†n h√¨nh.
	clear(); // L√†m s·∫°ch m√†n h√¨nh
	noecho(); // T·∫Øt hi·ªÉn th·ªã c√°c k√≠ t·ª± nh·∫≠p t·ª´ b√†n ph√≠m
	cbreak(); // Kh√¥ng ƒë·ª£i Enter m√† th·ª±c thi ngay k√≠ t·ª± v·ª´a nh·∫≠p
	curs_set(0); // ·∫®n con tr·ªè nh·∫•p nh√°y
    start_color();
    setupColor();
	srand(time(0));

	// Background Menu
	inputBackgroundMenu1(backgroundMenu1);
	inputBackgroundMenu2(backgroundMenu2);

	// Background Sign
	inputBackgroundSign(backgroundSignUp, "BackgroundSignUp.txt");
	inputBackgroundSign(backgroundSignIn, "BackgroundSignIn.txt");

	// Background Tutorial
	inputBackgroundTutorial(backgroundTutorial);

	// Background Game Mode
	inputBackgroundGM(backgroundGM);
	inputBackgroundGMEasy(backgroundGMEasy);
	inputBackgroundGMHard(backgroundGMHard);
    inputBackgroundGMReturn(backgroundGMReturn);

	// Background Map
	inputTextMap(backgroundMap);
	inputMapS(backgroundMapS);
	inputMapM(backgroundMapM);
	inputMapB(backgroundMapB);

	// Background Pause
	inputBackgroundPause(backgroundPause);

	// Background Warn
	inputBackgroundWarn(backgroundWarn);
	inputBackgroundNext(backgroundNext);

	// Background Finish
	inputBackgroundWinner(backgroundWinner);
	inputBackgroundLoser(backgroundLoser);

	while(!endMenu)
	{
		// Menu
		inputMenu(hz, dirMenu);
		if(!played)
			drawMenu(hz, chooseMenu, box1, box2, box3, box4, backgroundMenu1, backgroundMenu2);
		else
			drawMenu(hz, chooseMenu, box5, box6, box3, box4, backgroundMenu1, backgroundMenu2);
		logicMenu(chooseMenu, dirMenu, endMenu, endGM, played, endWarn, newGame, endSign, endTutorial, signUp);

		// Sign up // Sign in
		if(!played)
			while(!endSign)
			{
				if(chooseMenu == 2)
				{
					drawSign(backgroundSignIn, user, pass, endSeen, warnAcc, signUp);
					inputSign(user, pass, endUser, endPass, endSign, endSeen, endGM, warnAcc, signUp, chooseMenu);
				}
				else
				{
					drawSign(backgroundSignUp, user, pass, endSeen, warnAcc, signUp);
					inputSign(user, pass, endUser, endPass, endSign, endSeen, endGM, warnAcc, signUp, chooseMenu);
				}
			}
		
		// Tutorial
		while(!endTutorial)
		{
			inputTutorial(endTutorial);
			drawTutorial(backgroundTutorial);
		}
		
		// Warn for new game
		while(!newGame)
		{
			inputWarn(dirWarn);
			drawWarn(chooseWarnNewGame, backgroundWarn, backgroundNext, backgroundGMReturn);
			logicWarnNewGame(dirWarn, chooseWarnNewGame, newGame, prevMode, last,gameRound, endGM);
		}
			
		while(!endGM)
		{
			played = true;
			if(!endGame)
			{
				endMap = true;
				if(last == 0)
				{
					reset(idxObj, idxNum, line, lineOut, lineEnd, lineHelp, resetNum, resetLine, resetLineOut, resetLineEnd);

					if(modeHard == false)
					{
						if(gameRound == 1)
						{
							height = heightS;
							width = widthS;
							passingHeight = 16;
							passingWidth = 55;
							backgroundSmall(backgroundGame);
						}
						else if(gameRound == 2)
						{
							height = heightM;
							width = widthM;
							passingHeight = 7;
							passingWidth = 55;
							backgroundMedium(backgroundGame);
						}
						else if(gameRound == 3)
						{
							height = heightB;
							width = widthB;
							passingHeight = 7;
							passingWidth = 11;
							backgroundBig(backgroundGame);
						}
					}
					else
					{
						if(Map == 1)
						{
							height = heightS;
							width = widthS;
							passingHeight = 16;
							passingWidth = 55;
							backgroundSmall(backgroundGame);
						}
						else if(Map == 2)
						{
							height = heightM;
							width = widthM;
							passingHeight = 7;
							passingWidth = 55;
							backgroundMedium(backgroundGame);
						}
						else if(Map == 3)
						{
							height = heightB;
							width = widthB;
							passingHeight = 7;
							passingWidth = 11;
							backgroundBig(backgroundGame);
						}
					}

					setupGame(height, width, x, y, prevX, prevY, score, choosePause, confirm, modeHard,gameRound, Map, last, dir, hour, minute, second, millisec, totalTime, obj, randomObj, idxObj, idxNum, line, lineOut, lineEnd, greenBlock, redBlock);
				}
				
				while(!endGame)
				{
					if(minute == 0 && second == 0 && last != 0)
					{
						last = 0;
						endGame = true;
						gameRound = 3;
						win = false;
						endFinish = false;
						prevMode = 0;
						while(!endFinish)
						{
							inputFinish(endFinish);
							drawFinish(backgroundWinner, backgroundLoser, totalTime, score, win);
						}
						break;
					}
					draw(height, width, passingHeight, passingWidth, x, y, prevX, prevY, hour, minute, second, score, last,gameRound, modeHard, boxConfirm, backgroundGame, idxObj, idxNum, line, lineOut, lineEnd, lineHelp, resetNum, resetLine, resetLineOut, resetLineEnd, greenBlock, redBlock);
					input(dir);
					logic(ppxy, height, width, dir, last, score, endPause, endGame, endMap, confirm, obj, randomObj, idxObj, idxNum, line, lineOut, lineEnd, lineHelp, resetNum, resetLine, resetLineOut, resetLineEnd, greenBlock, redBlock);
					if(!endPause)
					{
						while(!endPause)
						{
							inputPause(dirPause);
							drawPause(choosePause, backgroundPause, box4, boxResume);
							logicPause(dirPause, choosePause, endPause, endGame);
						}
					}
					else if(last != 0)
						runTime(hour, minute, second, millisec, endGame);
				}

				if(gameRound == 3 && last == 0)
				{
					win = true;
					prevMode = 0;
					endFinish = false;
					while(!endFinish)
					{
						inputFinish(endFinish);
						drawFinish(backgroundWinner, backgroundLoser, totalTime, score, win);
					}
				}

				if(choosePause != 2)
				{
					if(!modeHard)
					{
						if(gameRound == 3)
							gameRound = 1;
						else if(confirm == true)
						{
							gameRound++;
							endGame = false;
						}
						else if(confirm == false)
							gameRound++;
					}
					else if(confirm == true)
						endGame = false;
				}
				else if(last == 0 && !modeHard)
					gameRound++;
			}

			if(!endGame)
				continue;

			// Game mode
			inputGameMode(dirGM);
			drawGM(chooseGM, backgroundGM, backgroundGMEasy, backgroundGMHard, backgroundGMReturn, boxGM1, boxGM2);
			logicGM(dirGM, chooseGM, endGM, endGame, modeHard, endMap, prevMode, last);

			// Map
			if(last == 0 || (last != 0 && !modeHard))
				while(!endMap)
				{
					inputMap(dirMap);
					drawMap(chooseMap, backgroundMap, backgroundMapS, backgroundMapM, backgroundMapB, backgroundGMReturn);
					logicMap(dirMap, chooseMap, endMap, endGame, modeHard, Map, prevMode);
				}

			// Warn
			if((modeHard && prevMode == 1) || (!modeHard && prevMode == 2))
			{
				endWarn = false;
				while(!endWarn)
				{
					inputWarn(dirWarn);
					drawWarn(chooseWarn, backgroundWarn, backgroundNext, backgroundGMReturn);
					logicWarn(dirWarn, chooseWarn, endWarn, modeHard, prevMode, endGame, endMap, last,gameRound);
				}
			}
		}
	}
	clear();
	getch();
	endwin();
	return 0;
}
